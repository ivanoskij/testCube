/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      fvOptions;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

sourceW_fvOPT
{
    type            scalarSemiImplicitSource;	
    active          true;
    timeStart       0;
    duration        1;
    selectionMode   cellSet; 	//OPTIONS: 'all', 'cellSet', 'cellZone', 'points'
    cellSet         sourceWset;
    fields 	    (W);
    volumeMode      absolute;	//OPTIONS: 'absolute' (scalar units, e.g. [kg]), 'specific' (salar units, e.g. [kg/m3])
    injectionRateSuSp 
	{
	 W (1 0);	//two coefficients needed (<scalarValue> <0>)
	}
}

///////////////////////////////////////////////////////////////////////////////
/*
sourceW_fvOPT
{

type  		scalarCodedSource;
active  	true;
name   		sourceW;
timeStart       0;
duration        1;
volumeMode      absolute;


scalarCodedSourceCoeffs
{
selectionMode   cellSet;
cellSet      	sourceWset;
fields      	(W);

        codeInclude
        #{
		#include "fvCFD.H"
        #};

	codeOptions	
	#{
	#};

	codeCorrect
        #{
        #};

	codeAddSup
        #{
	const IOdictionary& d = static_cast<const IOdictionary&>(dict_);

	const fvMesh& mesh = refCast<const fvMesh>(d.db());
            const label id = mesh.cellSet().findcellSetID("sourceW");
            //const fvPatch& sellCet = mesh.cellSet()[id];
	const volScalarField& W = d.db().objectRegistry::lookupObject<volScalarField> ("W");
	//const volScalarField& W =mesh().lookupObject("W");
        //const scalarField& Cf = mesh.Cf();
           //  const fvPatch& patch = mesh.boundary()[id];
            // const polyMesh& mesh=mesh.()
            //scalarField field(patch.nCells(), 0);

	cellSet test(mesh, sourceW);

	forAll(mesh.C(), id)
	{
    		if  (test[id])
    		{
           	//- Only get the cells which are included in the cellSet 
    		}
	}

	//const volVectorField& Cf = mesh.Cf(); 	// Get Mesh Coordinates of all Cells as Vector
	//vector Cs = Cf[sensorCell[i]];   		// Loop only over cellSet
	//scalar x = Cs.component(0); 		//Coordinate Components x,y,z of sensorCellSet
	//scalar y = Cs.component(1);
	//scalar z = Cs.component(2);

        const scalar s = 0.5;
            forAll(W, i)
            {
		const scalar x = mesh.Cf()[i][0];
		const scalar y = mesh.Cf()[i][1];
		const scalar z = mesh.Cf()[i][2];

		W[i] = scalar(pow(z/s, 2) + pow((y-s)/s,2) - 1.0*x);
            }
        #};

        codeSetValue
        #{
        #};

        code
        #{
            $codeInclude
            $codeCorrect
            $codeOptions
            $codeAddSup
            $codeSetValue
        #};

}
/*
// ************************************************************************* //
