//---------------------------------------------------------------------------------------START codeStream

        type            fixedValue;
        value           #codeStream
        {
            codeInclude	//files needed for automatic compilation
            #{
                #include "fvCFD.H"
            #};

            codeOptions	//options for compilation
            #{
                -I$(LIB_SRC)/finiteVolume/lnInclude \
                -I$(LIB_SRC)/meshTools/lnInclude \
            #};

     	    codeLibs	//libs needed to visualize BC in paraview
    	    #{
        		-lmeshTools \
        		-lfiniteVolume
    	    #};

            code	//personal code
            #{
                const IOdictionary& d = static_cast<const IOdictionary&>
		(
                    dict.parent().parent()
                ); // /?\ something related to topoSetDict

                const fvMesh& mesh = refCast<const fvMesh>(d.db());
                const label id = mesh.boundary().findPatchID("in");
                const fvPatch& patch = mesh.boundary()[id];

                scalarField W(patch.size(), 0);

                //const scalar pi = constant::mathematical::pi;	
                const scalar A = -114.58;
                const scalar B = 412.5;
                const scalar C = 542.29;
                const scalar D = 307.88;
                const scalar E = -62.766;	

                forAll(W, i)
                {
                    const scalar x = patch.Cf()[i][0];
                    const scalar y = patch.Cf()[i][1];
                    const scalar z = patch.Cf()[i][2];

                    W[i] = scalar(A*pow(y,4) + B*pow(y,3) + C*pow(y,2) + D*y + E); //it works!!!
                }

                W.writeEntry("", os);
            #};
        };

//---------------------------------------------------------------------------------------END codeStream 

