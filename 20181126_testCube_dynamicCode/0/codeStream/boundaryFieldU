//---------------------------------------------------------------------------------------START codeStream 

	type            fixedValue;
        value           #codeStream
        {
            codeInclude	//files needed for automatic compilation
            #{
                #include "fvCFD.H"
            #};

            codeOptions	//options for compilation
            #{
                -I$(LIB_SRC)/finiteVolume/lnInclude \
                -I$(LIB_SRC)/meshTools/lnInclude \
            #};

 
    	    codeLibs	//libs needed to visualize BC in paraview
    	    #{
        		-lmeshTools \
        		-lfiniteVolume
    	    #};

            code	//personal code
            #{
                const IOdictionary& d = static_cast<const IOdictionary&>
		(
                    dict.parent().parent()
                ); // /?\ something related to topoSetDict

                const fvMesh& mesh = refCast<const fvMesh>(d.db());
                const label id = mesh.boundary().findPatchID("in");
                const fvPatch& patch = mesh.boundary()[id];

                vectorField U(patch.size(), vector(0, 0, 0));

                //const scalar pi = constant::mathematical::pi;	
                //const scalar a  	= 	1;
                const scalar s = 0.5;

                forAll(U, i)
                {
                    const scalar x = patch.Cf()[i][0];
                    const scalar y = patch.Cf()[i][1];
                    const scalar z = patch.Cf()[i][2];

                    U[i] = vector(pow(z/s, 2) + pow((y-s)/s,2) - 1.0, 0, 0);
                }

                U.writeEntry("", os);
            #};
        };
	
//---------------------------------------------------------------------------------------END codeStream
